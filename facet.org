The Big List of Facet TODOs

* BUGS
** OpenStreetMap globe is broken on MacBook Air 11" (is it a precision problem?)
** Grand Tour demo is broken on MacBook Air 11" as well
** Fix graph visualization colors on github
** Documentation fixes
* Optimizer
** TODO Common subexpression elimination
    
  Without relying on the AST, that is.

** TODO cast chain optimization
float(float(x)) => float(x), 

float(x) => x, if x is known to be float

** TODO Generally, idempotent chain optimizations.

** TODO Logical expression optimizations

** TODO Initialization optimization for conditional expressions.
* Types
** TODO Function types
These will be useful when we have user-defined GLSL.

** TODO Loops of some kind. 

  Streams of value-generating expressions seem appropriate, since we
  can constrain the generator to be finite.

** TODO user-defined glsl

** TODO Invariance declarations

** TODO Typechecking code review 
functions like cosh which just build other expressions should have
stricter type checking.

* Documentation
** TODO NeHe Lessons
** TODO Change lesson2.html to reflect camera class.
** TODO We need a "pitfalls". For example, zoom.get() vs. zoom...
* Expressions
** TODO ternary op performance fixes.
Right now the algorithm in place is correct, but conservative. Ideally,
I will want to propagate BDDs up the expression tree and check them

** TODO precision declarations

* Rendering
** Batch Drawing Mode and Scene Rendering Mode
Batches can be drawn in different modes, currently:

- "regular" drawing
- additive blending
- alpha-blended

But scenes can also be rendered in different modes, currently

- regular drawing mode
- picking mode
- depth unproject mode

These two possibilities interact, and the result is a double dispatch,
currently implemented badly on Facet.DrawingMode.*

This should be fixed.

Namely, the Facet.DrawingMode.<foo>.set_<bar>_caps functions dispatch on both foo and bar.

One better solution is to have a dictionary and dispatch on (<foo>,
<bar>) pairs.

This would pave the way for extensible batch drawing modes. But extending
rendering modes is not as easy because, for example, the picking
procedure requires extra state to be kept around. This should be
designed carefully (in other words, I'm afraid of trying it out right
now)

* API
** TODO Support for boolean vectors
Part of it exists throughout Facet, but it's scattered and untested.
** TODO I really should have a matrix stack.
** TODO I should have a camera class

This class would expose Shade functions to perform transformations. A
cool demo would be a real non-linear fisheye distortion
projection. Obviously tesselation would be necessary, but it'd get the
point across.

** TODO There should be an API for strided attribute buffers.
The advantage here is that I could get different attributes from a
single bound array buffer. This would reduce the overhead of binding
the different attributes when switching state.

The main difficulty is that I currently
assume a one-to-one relationship between array buffers and attributes
throughout the API.
** TODO Fix inconsistent case conventions between Shade and GLSL
The way to do this is to *add* underscore_equivalents of the GLSL ugly
camelCase functions. This way, people familiar with GLSL can use them,
while people coming directly to Facet will use underscore
** TODO "Selection" is a terrible name. Fix it.
* Testing/Engineering
** TODO fix the _shade_type ugliness
One possibility is to create a WebGLObject prototype that knows how to
turn itself into a Shade expression
** TODO runtime type information
It is very convenient to use runtime type checking to get
polymorphism, but it seems like it tends to proliferate along the
code. I should try to consolidate all these calls in a single API of
some sort.
** TODO Write test suite for all builtins constant folding
I've been seeing a lot of infinite loops because of co-recursion in
constant_value. What do I do about it?

** TODO Typechecking code review 
functions like cosh which just build other expressions should have
stricter type checking.
** TODO Code review on FIXMEs
** TODO Review best practices on exception raising/handling in JS.
* Features
** Multiple WebGL canvases in a same page
This means multiple contexts, and lots of things are going to break.
** TEXT SUPPORT
** WebGL FBOs are square?!
According to the spec, they must be square. But I can create them in
WebGL without any trouble. I wonder if things will break.
** Mousewheel support
*** Integrate https://github.com/brandonaaron/jquery-mousewheel ?
* Other
** FIXME what do we do on canvas resizing?
